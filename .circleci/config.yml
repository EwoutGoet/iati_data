# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    #branches:
      #only:
        #- feature/circleci

    docker:
      - image: circleci/python:3.6.5

    working_directory: ~/OIPA

    steps:
      - checkout

      - run:
          name: Update package lists before installing dependencies
          command: sudo apt-get update

      - run:
          name: Install gdal dependencies
          command: |
            sudo apt-get install libgdal-dev
            sudo apt-get install gdal-bin

      - run:
          name: Install spacialite dependencies
          command: sudo apt-get install libsqlite3-mod-spatialite

      - run:
          name: Install Flake8 style guide checker
          command: sudo apt-get install flake8

      # Download and cache main dependencies:
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "OIPA/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Create virtual environment before doing anything
          command: python3 -m venv env

      - run:
          name: Install main dependencies
          command: |
            . env/bin/activate
            pip install -r OIPA/requirements.txt

      - save_cache:
          paths:
            - ./env
          key: v1-dependencies-{{ checksum "OIPA/requirements.txt" }}

      - run:
          name: Run Pytest tests
          command: |
            . env/bin/activate
            pytest OIPA/

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - run:
          name: Run pep8 code style checks
          command: |
            . env/bin/activate
            flake8 OIPA

  #TODO: in this step, deploy to ALL servers:
  deploy:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/OIPA
    steps:
      - run:
          name: Add target host to known_hosts files
          command: |
            ssh-keyscan "$SSH_HOST_YODA" >> ~/.ssh/known_hosts
      #- run:
          #name: Add target host to known_hosts files
          #command: |
            #if [ "${CIRCLE_BRANCH}" == "master" ]; then
              #ssh-keyscan "$SSH_HOST_PRODUCTION" >> ~/.ssh/known_hosts
            #elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              #ssh-keyscan "$SSH_HOST_STAGING" >> ~/.ssh/known_hosts
            #elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
              #ssh-keyscan "$SSH_HOST_DEV" >> ~/.ssh/known_hosts
            #else
              #ssh-keyscan "$SSH_HOST_TEST" >> ~/.ssh/known_hosts
            #fi
      #- add_ssh_keys:
          #name: Add SSH KEY
          #fingerprints:
            #- "6f:b2:10:8a:43:db:4b:fb:a0:31:47:da:99:68:7c:af"
      #- run: eval ssh-agent -s
      - run: sudo apt install rsync
      - run:
          name: Upload build folder to target host
          command: |
            rsync -ave  ssh ~/OIPA "$SSH_USER_YODA"@"$SSH_HOST_YODA":~/OIPA

            #if [ "${CIRCLE_BRANCH}" == "master" ]; then
              #rsync -ave  ssh ~/UNESCO-UI/build "$SSH_USER"@"$SSH_HOST_PRODUCTION":~/test/UNESCO-UI
            #elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              #rsync -ave  ssh ~/UNESCO-UI/build "$SSH_USER"@"$SSH_HOST_STAGING":~/UNESCO-UI
            #elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
              #rsync -ave  ssh ~/UNESCO-UI/build "$SSH_USER"@"$SSH_HOST_DEV":~/dev/UNESCO-UI
            #else
              #rsync -ave  ssh ~/UNESCO-UI/build "$SSH_USER"@"$SSH_HOST_TEST":~/test/UNESCO-UI
            #fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              #FIXME: this:
              only: circleci-deployments
